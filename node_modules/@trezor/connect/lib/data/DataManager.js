"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataManager = void 0;
const assets_1 = require("../utils/assets");
const coinInfo_1 = require("./coinInfo");
const firmwareInfo_1 = require("./firmwareInfo");
const transportInfo_1 = require("./transportInfo");
const types_1 = require("../types");
const assets = [
    {
        name: 'coins',
        url: './data/coins.json',
    },
    {
        name: 'coinsEth',
        url: './data/coins-eth.json',
    },
    {
        name: 'bridge',
        url: './data/bridge/releases.json',
    },
    {
        name: 'firmware-t1b1',
        url: './data/firmware/t1b1/releases.json',
    },
    {
        name: 'firmware-t2t1',
        url: './data/firmware/t2t1/releases.json',
    },
    {
        name: 'firmware-t2b1',
        url: './data/firmware/t2b1/releases.json',
    },
    {
        name: 'firmware-t3b1',
        url: './data/firmware/t3b1/releases.json',
    },
    {
        name: 'firmware-t3t1',
        url: './data/firmware/t3t1/releases.json',
    },
    {
        name: 'firmware-t3tw1',
        url: './data/firmware/t3w1/releases.json',
    },
];
class DataManager {
    static async load(settings, withAssets = true) {
        const ts = settings.env === 'web' ? `?r=${settings.timestamp}` : '';
        this.settings = settings;
        if (!withAssets)
            return;
        const assetPromises = assets.map(async (asset) => {
            const json = await (0, assets_1.httpRequest)(`${asset.url}${ts}`, 'json');
            this.assets[asset.name] = json;
        });
        await Promise.all(assetPromises);
        this.messages = await (0, assets_1.httpRequest)('./data/messages/messages.json', 'json');
        (0, transportInfo_1.parseBridgeJSON)(this.assets.bridge);
        (0, coinInfo_1.parseCoinsJson)({
            ...this.assets.coins,
            ...this.assets.coinsEth,
        });
        for (const model in types_1.DeviceModelInternal) {
            const firmwareKey = `firmware-${model.toLowerCase()}`;
            const modelType = types_1.DeviceModelInternal[model];
            if (this.assets[firmwareKey]) {
                (0, firmwareInfo_1.parseFirmware)(this.assets[firmwareKey], modelType);
            }
        }
    }
    static getProtobufMessages() {
        return this.messages;
    }
    static getSettings(key) {
        if (!this.settings)
            return null;
        if (typeof key === 'string') {
            return this.settings[key];
        }
        return this.settings;
    }
}
exports.DataManager = DataManager;
DataManager.assets = {};
//# sourceMappingURL=DataManager.js.map